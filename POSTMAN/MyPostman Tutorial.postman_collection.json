{
	"info": {
		"_postman_id": "42f11ad9-8195-4031-8de3-199a6416175c",
		"name": "MyPostman Tutorial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34532228"
	},
	"item": [
		{
			"name": "Book request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"myChart\");\r",
							"\r",
							"    var myChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [],\r",
							"            datasets: [{\r",
							"                data: [],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                borderColor: \"#003f5c\",\r",
							"                backgroundColor: \"rgba(0, 63, 92, 0.2)\"\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Book Availability'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Book ID'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Availability'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        var data = value.response;\r",
							"        myChart.data.datasets[0].data = data.map(book => book.available);\r",
							"        myChart.data.labels = data.map(book => book.id);\r",
							"        myChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var res = pm.response.json();\r",
							"    \r",
							"    var visualizerData = {\r",
							"        \r",
							"        // Labels take an array of strings\r",
							"        labels: res.map(book => book.id),\r",
							"        \r",
							"        // Data takes an array of booleans\r",
							"        data: res.map(book => book.available)\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book request | Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"myChart\");\r",
							"\r",
							"    var myChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [],\r",
							"            datasets: [{\r",
							"                data: [],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                borderColor: \"#003f5c\",\r",
							"                backgroundColor: \"rgba(0, 63, 92, 0.2)\"\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Book Availability'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Book ID'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Availability'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        var data = value.response;\r",
							"        myChart.data.datasets[0].data = data.map(book => book.available);\r",
							"        myChart.data.labels = data.map(book => book.id);\r",
							"        myChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var res = pm.response.json();\r",
							"    \r",
							"    var visualizerData = {\r",
							"        \r",
							"        // Labels take an array of strings\r",
							"        labels: res.map(book => book.id),\r",
							"        \r",
							"        // Data takes an array of booleans\r",
							"        data: res.map(book => book.available)\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?type=fiction",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Book request | Params-2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"myChart\");\r",
							"\r",
							"    var myChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [],\r",
							"            datasets: [{\r",
							"                data: [],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                borderColor: \"#003f5c\",\r",
							"                backgroundColor: \"rgba(0, 63, 92, 0.2)\"\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Book Availability'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Book ID'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Availability'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        var data = value.response;\r",
							"        myChart.data.datasets[0].data = data.map(book => book.available);\r",
							"        myChart.data.labels = data.map(book => book.id);\r",
							"        myChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var res = pm.response.json();\r",
							"    \r",
							"    var visualizerData = {\r",
							"        \r",
							"        // Labels take an array of strings\r",
							"        labels: res.map(book => book.id),\r",
							"        \r",
							"        // Data takes an array of booleans\r",
							"        data: res.map(book => book.available)\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books?limit=2",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Book request | Params-3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"myChart\");\r",
							"\r",
							"    var myChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [],\r",
							"            datasets: [{\r",
							"                data: [],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                borderColor: \"#003f5c\",\r",
							"                backgroundColor: \"rgba(0, 63, 92, 0.2)\"\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Book Availability'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Book ID'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Availability'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        var data = value.response;\r",
							"        myChart.data.datasets[0].data = data.map(book => book.available);\r",
							"        myChart.data.labels = data.map(book => book.id);\r",
							"        myChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var res = pm.response.json();\r",
							"    \r",
							"    var visualizerData = {\r",
							"        \r",
							"        // Labels take an array of strings\r",
							"        labels: res.map(book => book.id),\r",
							"        \r",
							"        // Data takes an array of booleans\r",
							"        data: res.map(book => book.available)\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/1\n",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						"1\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book request | Params-3b",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
							"\r",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
							"\r",
							"<script>\r",
							"    var ctx = document.getElementById(\"myChart\");\r",
							"\r",
							"    var myChart = new Chart(ctx, {\r",
							"        type: \"line\",\r",
							"        data: {\r",
							"            labels: [],\r",
							"            datasets: [{\r",
							"                data: [],\r",
							"                \r",
							"                // Change these colours to customize the chart\r",
							"                borderColor: \"#003f5c\",\r",
							"                backgroundColor: \"rgba(0, 63, 92, 0.2)\"\r",
							"            }]\r",
							"        },\r",
							"        options: {\r",
							"            legend: { display: false },\r",
							"            title: {\r",
							"                display: true,\r",
							"                text: 'Book Availability'\r",
							"            },\r",
							"            scales: {\r",
							"                xAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Book ID'\r",
							"                    }\r",
							"                }],\r",
							"                yAxes: [{\r",
							"                    display: true,\r",
							"                    scaleLabel: {\r",
							"                        display: true,\r",
							"                        labelString: 'Availability'\r",
							"                    }\r",
							"                }]\r",
							"            }\r",
							"        }\r",
							"\r",
							"    });\r",
							"\r",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
							"    // code of the Visualizer template\r",
							"    pm.getData(function (err, value) {\r",
							"        var data = value.response;\r",
							"        myChart.data.datasets[0].data = data.map(book => book.available);\r",
							"        myChart.data.labels = data.map(book => book.id);\r",
							"        myChart.update();\r",
							"    });\r",
							"\r",
							"</script>`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    var res = pm.response.json();\r",
							"    \r",
							"    var visualizerData = {\r",
							"        \r",
							"        // Labels take an array of strings\r",
							"        labels: res.map(book => book.id),\r",
							"        \r",
							"        // Data takes an array of booleans\r",
							"        data: res.map(book => book.available)\r",
							"    };\r",
							"\r",
							"    return {response: visualizerData};\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books/:bookId\n",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books",
						":bookId\n"
					],
					"variable": [
						{
							"key": "bookId\n",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "genre=Fiction",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/books/search?genre=Fiction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"search"
					],
					"query": [
						{
							"key": "genre",
							"value": "Fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "author=James Dedon",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/books/search?genre=Fiction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"search"
					],
					"query": [
						{
							"key": "genre",
							"value": "Fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "author=James Dedon-2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/books/search?genre=Fiction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"search"
					],
					"query": [
						{
							"key": "genre",
							"value": "Fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "custom_id=1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/books/search?custom_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"search"
					],
					"query": [
						{
							"key": "custom_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}